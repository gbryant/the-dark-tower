Copyright 2016 Gregory BryantLicensed under the Apache License, Version 2.0 (the "License");you may not use this file except in compliance with the License.You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an "AS IS" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License./***********************************************************************/#define kEventWaitTime 0#define FileReference	char*#ifdef __POWERPC__	//#include <CarbonHeaders.h>	#include <MacHeadersCarbon.h>	#include "WindowsTypes.h"	#include "ProjectDefines.h"	#include "ProjectStructs.h"	#include "ProjectPrototypes.h"	#include "ProjectGlobals.h"	#include <profiler.h>	#include "mach_headers.h"	  	void MCD_free(void *p,char*fun,char*file,int line);	char *MCD_malloc(int size,char*fun,char*file,int line);			#define	NumToString(X,Y)	NumberToString((long)X,(char*)Y)	#define	DisposePtr(X)		DisposePtr((char*)X)	//	#define NewPtr(X,Y,Z) 		NewPtr(Z)//	#define NewPtr(X) 			MyNewPtr(X,__FILE__,__LINE__)//	#define NewPtr(X)			MCD_malloc((int)X,(char*)__FUNCTION__,(char*)__FILE__,__LINE__)//	#define DisposePtr(X)		MCD_free((void*)X,(char*)__FUNCTION__,(char*)__FILE__,__LINE__)	//	#define NewPtr(X) 			MyNewPtr(X)//	#define	DisposePtr(X)		MyDisposePtr(X)//	#define	DisposePtr(X);		if(IsPointerValid((char*)X)){DisposePtr((char*)X);}else{Debugger();}		#define FSRead(X,Y,Z)		(void*)FSRead((short)X,(long*)Y,Z)	#define GetFPos(X,Y)		GetFPos((short)X,Y)	#define SetFPos(X,Y,Z)		SetFPos((short)X,Y,Z);	#define FSpOpenDF(X,Y,Z)	(void*)FSpOpenDF((FSSpec*)X,Y,((short*)Z)+1)	#define FSpCreate(A,B,C,D)	(void*)FSpCreate((FSSpec*)A,B,C,D)	#define FSpDirCreate(X,Y,Z)	FSpDirCreate((FSSpec*)X,Y,Z)	#define GetEOF(X,Y)			GetEOF((short)X,Y)	#define SetEOF(X,Y)			SetEOF((short)X,Y)	#define FSClose(X)			FSClose((short)X)	#define FSWrite(X,Y,Z)		(void*)FSWrite((short)X,(long*)Y,Z)#endif#ifdef __INTEL__		//-----------------------------temporary to force compile	#define kControlEntireControl 0	#define kControlProgressBarIndeterminateTag 0	#define ReceiveNextEvent(A,B,C,D,E) ;	//-----------------------------------------------------------						#define  fnfErr	-43			#define ControlRef		void*	#define FSRef			void*	#define KeyMap			void*	#define WindowRef		void*	#define FSCatalogInfo	void*					#include <Win32Headers.mch>	/*	#include "ansi_prefix.win32.h"	#include <windows.h>	#include <shlobj.h>	#include <shellapi.h>*/	/*	struct FSSpec {	short               vRefNum;	long                parID;	unsigned char         name[256];                   	};	typedef struct FSSpec                   FSSpec;	*/	#define FSSpec char		#include "ConditionalMacros.h"	#include "MacTypes.h"	#include "PEFBinaryFormat.h"	#include "ProjectStructs.h"	#include "ProjectPrototypes.h"	#include "ProjectGlobals.h"	#include "ProjectDefines.h"	#include "mach_headers.h"				#define GetFPos(X,Y)	*Y = SetFilePointer(X, 0, NULL, FILE_CURRENT)	//#define GetFilePointer(hFile) SetFilePointer(hFile, 0, NULL, FILE_CURRENT)	#define G_HEAP				heap	#define	fsRdPerm			GENERIC_READ	#define fsWrPerm			GENERIC_WRITE	#define fsRdWrPerm			(GENERIC_READ ^ GENERIC_WRITE)	#define fsFromStart			FILE_BEGIN	#define fsFromMark			FILE_CURRENT	#define IsPointerValid(X)	HeapValidate(G_HEAP,0,X)	#define	FSpOpenDF(X,Y,Z)	*Z = CreateFile((const char*)X,Y,FILE_SHARE_READ,NULL,OPEN_EXISTING,0,0)	//#define NewPtr(Z,Y,X)		(char*)(X!=0?(HeapAlloc(G_HEAP,0,X)):0)	#define NewPtr(X) 			MyNewPtr(X)	#define NewPtrClear(X)		(char*)(X!=0?(HeapAlloc(G_HEAP,HEAP_ZERO_MEMORY,X)):0)	#define FSRead(X,Y,Z)		ReadFile(X,Z,*Y,Y,NULL)	#define SetFPos(X,Y,Z)		SetFilePointer(X,Z,NULL,Y)	//#define DisposePtr(X)		HeapFree(G_HEAP,0,X)	#define DisposePtr(X)		MyDisposePtr((char*)X)	#define GetEOF(X,Y)			*Y = GetFileSize(X,0);				#define SetControl32BitMaximum(X,Y)		SendMessage((HWND)X,PBM_SETRANGE32,0,Y);	#define SetControl32BitValue(X,Y)		SendMessage((HWND)X,PBM_SETPOS,Y,0);		#define	SetEOF(X,Y)						SetFilePointer(X,Y,NULL,FILE_BEGIN);SetEndOfFile(X)	#define FSClose(X)						CloseHandle(X)	#define	FSpDirCreate(X,Y,Z)				CreateDirectory((char*)X,NULL)	#define FSWrite(X,Y,Z)					WriteFile(X,Z,*Y,Y,NULL)	#define FSpCreate(W,X,Y,Z)				FSClose( CreateFile((const char*)(W),GENERIC_WRITE,FILE_SHARE_WRITE,NULL,CREATE_ALWAYS,0,0) )	#define	NumToString(X,Y)				NumberToString((long)X,(char*)Y)	#define ID_ASSM_SELECT 	8000	#define ID_FILE_GLOBAL 	8001	#define ID_FILE_EXIT 	8002	#define ID_HELP_ABOUT 	8003	#define ID_DASSM_SELECT 8004	#define ID_EXP_SELECT 	8005#endif