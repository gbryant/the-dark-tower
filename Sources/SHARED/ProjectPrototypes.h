Copyright 2016 Gregory BryantLicensed under the Apache License, Version 2.0 (the "License");you may not use this file except in compliance with the License.You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an "AS IS" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License./***********************************************************************/#ifdef __INTEL__void open(void);void Initialize(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow);LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);void Swap_PEF_CONTAINER_HEADER(PEFContainerHeader *header);void Swap_PEF_SECTION_HEADER(PEFSectionHeader	*header);void Swap_PEF_LOADER_INFO_HEADER(PEFLoaderInfoHeader	*header);void Swap_PEF_IMPORTED_LIBRARY(PEFImportedLibrary	*implib);void Swap_SHORT(unsigned short	*aShort);void Swap_LONG(void	*aLong);void Swap_PEF_EXPORTED_SYMBOL(PEFExportedSymbol	*exsym);void Swap_PEFLoaderRelocationHeader(PEFLoaderRelocationHeader	*header);void Swap_MACH_HEADER(struct mach_header *header);void Swap_MACBINARYIII_HEADER(MacBinaryIIIHeader *header);FileReference MyGetFile(unsigned char*);FileReference MyGetFolder(unsigned char*);#endif#ifdef __POWERPC__pascal OSStatus SrcViewDrawHandler(EventHandlerCallRef nextHandler, EventRef theEvent, void* userData);pascal OSStatus SrcViewClickHandler(EventHandlerCallRef nextHandler, EventRef theEvent, void* userData);void AddDataViewColumn(Str255 title,long width,long type,DataView *dataView,WindowRef window);pascal void SrcScrollProcedure(ControlHandle theControl, short part);void WriteRelocsToFile(FileReference file);void Function_kCFRG_NewSource(void);void Function_kCFRG_SelectSource(void);void Function_kCFRG_SelectData(void);void Function_kCFRG_NewRelocation(void);void Function_kCFRG_EditRelocation(void);void Function_kCFRG_SelectRelocation(void);void Function_kCFRG_SelectResource(void);void Function_kMACH_SelectSource(void);void Function_kMACH_SelectMachInfo(void);OSStatus Handle_MACH_Controls(long	id, ControlPartCode part, WindowRef window,ControlRef control);void Function_kASSM_GoButton(void);void Function_kASSM_Open(void);void Function_kASSM_Save(void);void Function_kASSM_New(void);void Function_kDISS_TargetIcon(void);void Function_kEXPL_TargetIcon(void);pascal OSStatus AppCommandHandler(EventHandlerCallRef,EventRef,void*);pascal OSStatus AppControlHandler(EventHandlerCallRef,EventRef,void*);pascal OSStatus AppMenuHandler(EventHandlerCallRef,EventRef,void*);pascal OSStatus ControlHandler(EventHandlerCallRef,EventRef,void*);pascal OSStatus ControlHandler2(EventHandlerCallRef,EventRef,void*);pascal OSErr AEHandler(const AppleEvent*,AppleEvent*,long);FileReference MyGetFile(Str255);FileReference MyGetFolder(Str255);pascal void SaveBoxEventProc(NavEventCallbackMessage,NavCBRecPtr,void*);OSStatus Handle_ASSM_Controls(long,ControlPartCode,WindowRef,ControlRef);OSStatus Handle_CFRG_Controls(long,ControlPartCode,WindowRef,ControlRef);OSStatus Handle_DISS_Controls(long,ControlPartCode,WindowRef,ControlRef);OSStatus Handle_EXPL_Controls(long,ControlPartCode,WindowRef,ControlRef);OSStatus Handle_PREF_Controls(long,ControlPartCode,WindowRef,ControlRef);OSStatus Handle_MAIN_Controls(long,ControlPartCode,WindowRef,ControlRef);OSStatus Handle_RLOC_Controls(long,ControlPartCode,WindowRef,ControlRef);OSStatus Handle_SRC_Controls(long,ControlPartCode,WindowRef,ControlRef);OSStatus Handle_ASKS_Controls(long,ControlPartCode,WindowRef,ControlRef);Boolean Save_Relocations(WindowRef);pascal OSStatus KeyDownHandler(EventHandlerCallRef nextHandler, EventRef theEvent, void* userData);pascal OSStatus KeyModifierHandler(EventHandlerCallRef nextHandler, EventRef theEvent, void* userData);void AssociateControls(void);void ClearKey(Key *key);void FileRef_Dispose(FileReference ref);ControlKeyFilterResult Handle_PEFReloc_KeyFilter(ControlRef theControl, SInt16 *keyCode, SInt16 *charCode, EventModifiers *modifiers);ControlKeyFilterResult Handle_ASSM_KeyFilter(ControlRef theControl, SInt16 *keyCode, SInt16 *charCode, EventModifiers *modifiers);ControlKeyFilterResult Handle_SIIN_KeyFilter(ControlRef theControl, SInt16 *keyCode, SInt16 *charCode, EventModifiers *modifiers);ControlKeyFilterResult Handle_SRCEdit_KeyFilter(ControlRef theControl, SInt16 *keyCode, SInt16 *charCode, EventModifiers *modifiers);void Fill_CFRG(Key*);Boolean Save_Project(void);pascal OSStatus MouseDownHandler(EventHandlerCallRef nextHandler, EventRef theEvent, void* userData);pascal OSStatus AppWindowHandler(EventHandlerCallRef nextHandler, EventRef theEvent, void* userData);pascal OSStatus WindowCloseHandler(EventHandlerCallRef nextHandler, EventRef theEvent, void* userData);pascal OSErr MyDragReceiveHandlerCallback (WindowRef theWindow, void *handlerRefCon, DragRef theDrag);pascal OSErr MyDragTrackingHandlerCallback(DragTrackingMessage message, WindowRef theWindow, void *handlerRefCon, DragRef theDrag);#endifvoid BuildRelocationCell(LongChain *lc);void BuildSourceCell(LongChain *lc);LongChain* NewLongChain(unsigned long v, long opcode, unsigned char*, CustomColumnRLOC *args);long DestroyLongChain(LongChain*);long LongChainInsert(LongChain *target,LongChain *inserted,short selector);long LongChainRemove(LongChain**,unsigned long);LongChain* LongChainAdd(LongChain **lc,unsigned long v, long opcode,unsigned char*, CustomColumnRLOC *args);LongChain* LongChainFind(LongChain*,unsigned long);LongChain* LongChainCopy(LongChain *lc);long LongChainRemoveList(LongChain **lc,LongChain *lst);LongChain* LongChainPop(LongChain **lc);void WriteStatus(char	*string);void DT_SetProgressState(ControlRef control, long tag, Boolean state);void EditRelocations(Key	*theKey);WindowRef EditSource(FileReference);LongChain* ObtainRelocationChain(Key*);long* ObtainSourceChain(FileReference,long*);void DisassembleMemory(void);void SelectDisassembleMethod(FileReference src, FileReference dst);void SelectAssembleMethod(Key *projectKey);void DisassembleCFragM(void	*fref, void	*destRef);long CheckError_FSpOpenDF(void* error);long FileRef_GetNameLength(FileReference file);void FileRef_GetFileName(void *src,unsigned char *dest);void FileRef_To_FileRef_NewName(void *src,unsigned char *fname,void *dest);void FileRef_To_FileRef_Copy(void *src, void *dest);FileReference FileRef_Allocate(void);void FileRef_To_FileRef_InDirectory(void *src,unsigned char *fname,void *dest);void FileRef_NewInAppDir(unsigned char* name,FileReference dest);void DisassembleMachO(void	*fref, void	*destRef);Boolean MyCStrCmp(char*,char*);void DoSettings(void);LabelList* MakeLabelList(LabelListPBlock*);void RelocationVM(RelocOpWriterPBlock*);void DebugFunction(unsigned char*);short CountBits(long);void RelocationOpcodeWriter(RelocOpWriterPBlock*);void DisassembleCFrag(void	*fref, void	*destRef, MacBinaryIIIHeader *mbin3Header);void DisassemblePE(void	*fref, void	*destRef);void DisassembleELF(void	*fref, void	*destRef);void Disassemble(void);void Explore(void);long StringLength(char*);long BitsToNumber(long);void AboutApplication(void);void SelectSourceAndBuild(void);LabelList* BranchFinder(long codeLength,long *codeSection,RelocMachine *rm);LabelList* BranchFinder2(long codeLength,long *codeSection,RelocMachine *rm);void InsertFragPoints(LabelList**,FragPoint*);void InsertExports(LabelList**,CodeExport*);void RelocationVMEngine(RelocOpWriterPBlock *rowPB, LabelList	**curr);void MnemonicWriter(MnemonicWriterPBlock*);void ImportWriter(long,PEFImportedLibrary*,PEFImportedSymbol*,char*,long*,void*);void WriteKeyFile(KeyFilePB*);void hex2char(long, char*);int MyPStrAdd(Str255,Str255,Str255);void ReadKeyFile(Key *keyStructure,void *keyFile);long _pow(long,long);void NumberToString(long number, char *string);//char* MyNewPtr(char* fileName, long lineNum, Size byteCount);char* MyNewPtr(Size byteCount);void MyDisposePtr(Ptr ptr);void Byte_COLON(AssemblyPBlock*);void Byte_ATSYMBOL(AssemblyPBlock*);void Byte_ATSYMBOL386(AssemblyPBlock*);void Byte_ILLEGAL(AssemblyPBlock*);int Byte_DEFAULT(AssemblyPBlock*);void Byte_DEFAULT386(AssemblyPBlock*);long CharHexToDec(Str255 bytes);void IllegalROP(RelocOpWriterPBlock*);void ROP_DDAT(RelocOpWriterPBlock*);void ROP_CODE(RelocOpWriterPBlock*);void ROP_DATA(RelocOpWriterPBlock*);void ROP_DESC(RelocOpWriterPBlock*);void ROP_DSC2(RelocOpWriterPBlock*);void ROP_VTBL(RelocOpWriterPBlock*);void ROP_SYMR(RelocOpWriterPBlock*);void ROP_SYMB(RelocOpWriterPBlock*);void ROP_CDIS(RelocOpWriterPBlock*);void ROP_DTIS(RelocOpWriterPBlock*);void ROP_SECN(RelocOpWriterPBlock*);void ROP_DELT(RelocOpWriterPBlock*);void ROP_RPT(RelocOpWriterPBlock*);void ROP_LABS(RelocOpWriterPBlock*);void ROP_LSYM(RelocOpWriterPBlock*);void ROP_LRPT(RelocOpWriterPBlock*);void ROP_LSEC(RelocOpWriterPBlock*);void RPT(AssemblyPBlock*);void CODE(AssemblyPBlock*);void CDIS(AssemblyPBlock*);void DDAT(AssemblyPBlock*);void DATA(AssemblyPBlock*);void DESC(AssemblyPBlock*);void DSC2(AssemblyPBlock*);void DELT(AssemblyPBlock*);void DTIS(AssemblyPBlock*);void LABS(AssemblyPBlock*);void LSYM(AssemblyPBlock*);void LRPT(AssemblyPBlock*);void LSEC(AssemblyPBlock*);void VTBL(AssemblyPBlock*);void SECN(AssemblyPBlock*);void SYMR(AssemblyPBlock*);void SYMB(AssemblyPBlock*);void GUI_RPT(AssemblyPBlock*);void GUI_CODE(AssemblyPBlock*);void GUI_CDIS(AssemblyPBlock*);void GUI_DDAT(AssemblyPBlock*);void GUI_DATA(AssemblyPBlock*);void GUI_DESC(AssemblyPBlock*);void GUI_DSC2(AssemblyPBlock*);void GUI_DELT(AssemblyPBlock*);void GUI_DTIS(AssemblyPBlock*);void GUI_LABS(AssemblyPBlock*);void GUI_LSYM(AssemblyPBlock*);void GUI_LRPT(AssemblyPBlock*);void GUI_LSEC(AssemblyPBlock*);void GUI_VTBL(AssemblyPBlock*);void GUI_SECN(AssemblyPBlock*);void GUI_SYMR(AssemblyPBlock*);void GUI_SYMB(AssemblyPBlock*);void OP_DC(MnemonicPBlock*);void OP_03(MnemonicPBlock*);void OP_04(MnemonicPBlock*);void OP_07(MnemonicPBlock*);void OP_08(MnemonicPBlock*);void OP_10(MnemonicPBlock*);void OP_11(MnemonicPBlock*);void OP_12(MnemonicPBlock*);void OP_13(MnemonicPBlock*);void OP_14(MnemonicPBlock*);void OP_15(MnemonicPBlock*);void OP_16(MnemonicPBlock*);void OP_17(MnemonicPBlock*);void OP_18(MnemonicPBlock*);void OP_19(MnemonicPBlock*);void OP_20(MnemonicPBlock*);void OP_21(MnemonicPBlock*);void OP_23(MnemonicPBlock*);void OP_24(MnemonicPBlock*);void OP_25(MnemonicPBlock*);void OP_26(MnemonicPBlock*);void OP_27(MnemonicPBlock*);void OP_28(MnemonicPBlock*);void OP_29(MnemonicPBlock*);void OP_31(MnemonicPBlock*);void OP_32(MnemonicPBlock*);void OP_33(MnemonicPBlock*);void OP_34(MnemonicPBlock*);void OP_35(MnemonicPBlock*);void OP_36(MnemonicPBlock*);void OP_37(MnemonicPBlock*);void OP_38(MnemonicPBlock*);void OP_39(MnemonicPBlock*);void OP_40(MnemonicPBlock*);void OP_41(MnemonicPBlock*);void OP_42(MnemonicPBlock*);void OP_43(MnemonicPBlock*);void OP_44(MnemonicPBlock*);void OP_45(MnemonicPBlock*);void OP_46(MnemonicPBlock*);void OP_47(MnemonicPBlock*);void OP_48(MnemonicPBlock*);void OP_49(MnemonicPBlock*);void OP_50(MnemonicPBlock*);void OP_51(MnemonicPBlock*);void OP_52(MnemonicPBlock*);void OP_53(MnemonicPBlock*);void OP_54(MnemonicPBlock*);void OP_55(MnemonicPBlock*);void OP_59(MnemonicPBlock*);void OP_63(MnemonicPBlock*);//-------------------------void OP_04_SUB_0032(MnemonicPBlock*);void OP_04_SUB_0033(MnemonicPBlock*);void OP_04_SUB_0034(MnemonicPBlock*);void OP_04_SUB_0036(MnemonicPBlock*);void OP_04_SUB_0037(MnemonicPBlock*);void OP_04_SUB_0038(MnemonicPBlock*);void OP_04_SUB_0039(MnemonicPBlock*);void OP_04_SUB_0040(MnemonicPBlock*);void OP_04_SUB_0041(MnemonicPBlock*);void OP_04_SUB_0042(MnemonicPBlock*);void OP_04_SUB_0043(MnemonicPBlock*);void OP_04_SUB_0044(MnemonicPBlock*);void OP_04_SUB_0046(MnemonicPBlock*);void OP_04_SUB_0047(MnemonicPBlock*);void OP_04_SUB_0000(MnemonicPBlock*);void OP_04_SUB_0064(MnemonicPBlock*);void OP_04_SUB_0128(MnemonicPBlock*);void OP_04_SUB_0512(MnemonicPBlock*);void OP_04_SUB_0576(MnemonicPBlock*);void OP_04_SUB_0640(MnemonicPBlock*);void OP_04_SUB_0768(MnemonicPBlock*);void OP_04_SUB_0832(MnemonicPBlock*);void OP_04_SUB_0896(MnemonicPBlock*);void OP_04_SUB_1024(MnemonicPBlock*);void OP_04_SUB_1088(MnemonicPBlock*);void OP_04_SUB_1152(MnemonicPBlock*);void OP_04_SUB_1408(MnemonicPBlock*);void OP_04_SUB_1536(MnemonicPBlock*);void OP_04_SUB_1600(MnemonicPBlock*);void OP_04_SUB_1664(MnemonicPBlock*);void OP_04_SUB_1792(MnemonicPBlock*);void OP_04_SUB_1856(MnemonicPBlock*);void OP_04_SUB_1920(MnemonicPBlock*);void OP_04_SUB_0002(MnemonicPBlock*);void OP_04_SUB_0066(MnemonicPBlock*);void OP_04_SUB_0130(MnemonicPBlock*);void OP_04_SUB_0258(MnemonicPBlock*);void OP_04_SUB_0322(MnemonicPBlock*);void OP_04_SUB_0386(MnemonicPBlock*);void OP_04_SUB_0514(MnemonicPBlock*);void OP_04_SUB_0578(MnemonicPBlock*);void OP_04_SUB_0642(MnemonicPBlock*);void OP_04_SUB_0770(MnemonicPBlock*);void OP_04_SUB_0834(MnemonicPBlock*);void OP_04_SUB_0898(MnemonicPBlock*);void OP_04_SUB_1026(MnemonicPBlock*);void OP_04_SUB_1090(MnemonicPBlock*);void OP_04_SUB_1154(MnemonicPBlock*);void OP_04_SUB_1282(MnemonicPBlock*);void OP_04_SUB_1346(MnemonicPBlock*);void OP_04_SUB_1410(MnemonicPBlock*);void OP_04_SUB_0004(MnemonicPBlock*);void OP_04_SUB_0068(MnemonicPBlock*);void OP_04_SUB_0132(MnemonicPBlock*);void OP_04_SUB_0260(MnemonicPBlock*);void OP_04_SUB_0324(MnemonicPBlock*);void OP_04_SUB_0388(MnemonicPBlock*);void OP_04_SUB_0452(MnemonicPBlock*);void OP_04_SUB_0516(MnemonicPBlock*);void OP_04_SUB_0580(MnemonicPBlock*);void OP_04_SUB_0644(MnemonicPBlock*);void OP_04_SUB_0708(MnemonicPBlock*);void OP_04_SUB_0772(MnemonicPBlock*);void OP_04_SUB_0836(MnemonicPBlock*);void OP_04_SUB_0900(MnemonicPBlock*);void OP_04_SUB_1028(MnemonicPBlock*);void OP_04_SUB_1092(MnemonicPBlock*);void OP_04_SUB_1156(MnemonicPBlock*);void OP_04_SUB_1284(MnemonicPBlock*);void OP_04_SUB_1540(MnemonicPBlock*);void OP_04_SUB_1604(MnemonicPBlock*);void OP_04_SUB_0008(MnemonicPBlock*);void OP_04_SUB_0072(MnemonicPBlock*);void OP_04_SUB_0264(MnemonicPBlock*);void OP_04_SUB_0328(MnemonicPBlock*);void OP_04_SUB_0520(MnemonicPBlock*);void OP_04_SUB_0584(MnemonicPBlock*);void OP_04_SUB_0776(MnemonicPBlock*);void OP_04_SUB_0840(MnemonicPBlock*);void OP_04_SUB_1544(MnemonicPBlock*);void OP_04_SUB_1800(MnemonicPBlock*);void OP_04_SUB_1608(MnemonicPBlock*);void OP_04_SUB_1672(MnemonicPBlock*);void OP_04_SUB_1928(MnemonicPBlock*);void OP_04_SUB_0010(MnemonicPBlock*);void OP_04_SUB_0074(MnemonicPBlock*);void OP_04_SUB_0266(MnemonicPBlock*);void OP_04_SUB_0330(MnemonicPBlock*);void OP_04_SUB_0394(MnemonicPBlock*);void OP_04_SUB_0458(MnemonicPBlock*);void OP_04_SUB_0522(MnemonicPBlock*);void OP_04_SUB_0586(MnemonicPBlock*);void OP_04_SUB_0650(MnemonicPBlock*);void OP_04_SUB_0714(MnemonicPBlock*);void OP_04_SUB_0778(MnemonicPBlock*);void OP_04_SUB_0842(MnemonicPBlock*);void OP_04_SUB_0906(MnemonicPBlock*);void OP_04_SUB_0970(MnemonicPBlock*);void OP_04_SUB_1034(MnemonicPBlock*);void OP_04_SUB_1098(MnemonicPBlock*);void OP_04_SUB_0012(MnemonicPBlock*);void OP_04_SUB_0076(MnemonicPBlock*);void OP_04_SUB_0140(MnemonicPBlock*);void OP_04_SUB_0268(MnemonicPBlock*);void OP_04_SUB_0332(MnemonicPBlock*);void OP_04_SUB_0396(MnemonicPBlock*);void OP_04_SUB_0524(MnemonicPBlock*);void OP_04_SUB_0588(MnemonicPBlock*);void OP_04_SUB_0652(MnemonicPBlock*);void OP_04_SUB_0780(MnemonicPBlock*);void OP_04_SUB_0844(MnemonicPBlock*);void OP_04_SUB_0908(MnemonicPBlock*);void OP_04_SUB_1036(MnemonicPBlock*);void OP_04_SUB_1100(MnemonicPBlock*);void OP_04_SUB_0014(MnemonicPBlock*);void OP_04_SUB_0078(MnemonicPBlock*);void OP_04_SUB_0142(MnemonicPBlock*);void OP_04_SUB_0206(MnemonicPBlock*);void OP_04_SUB_0270(MnemonicPBlock*);void OP_04_SUB_0334(MnemonicPBlock*);void OP_04_SUB_0398(MnemonicPBlock*);void OP_04_SUB_0462(MnemonicPBlock*);void OP_04_SUB_0526(MnemonicPBlock*);void OP_04_SUB_0590(MnemonicPBlock*);void OP_04_SUB_0654(MnemonicPBlock*);void OP_04_SUB_0718(MnemonicPBlock*);void OP_04_SUB_0782(MnemonicPBlock*);void OP_04_SUB_0846(MnemonicPBlock*);void OP_04_SUB_0974(MnemonicPBlock*);void OP_04_SUB_1220(MnemonicPBlock*);void OP_31_SUB_0684(MnemonicPBlock*);void OP_31_SUB_0748(MnemonicPBlock*);void OP_31_SUB_1644(MnemonicPBlock*);void OP_31_SUB_0014(MnemonicPBlock*);void OP_31_SUB_0078(MnemonicPBlock*);void OP_31_SUB_0142(MnemonicPBlock*);void OP_31_SUB_0012(MnemonicPBlock*);void OP_31_SUB_0076(MnemonicPBlock*);void OP_31_SUB_0206(MnemonicPBlock*);void OP_31_SUB_0718(MnemonicPBlock*);void OP_31_SUB_0270(MnemonicPBlock*);void OP_31_SUB_0334(MnemonicPBlock*);void OP_31_SUB_0398(MnemonicPBlock*);void OP_31_SUB_0462(MnemonicPBlock*);void OP_31_SUB_0974(MnemonicPBlock*);//-------------------------------------------------------------------------------void OP_04_SUB_0966(MnemonicPBlock*);void OP_04_SUB_1990(MnemonicPBlock*);void OP_04_SUB_0198(MnemonicPBlock*);void OP_04_SUB_1222(MnemonicPBlock*);void OP_04_SUB_0006(MnemonicPBlock*);void OP_04_SUB_1030(MnemonicPBlock*);void OP_04_SUB_0070(MnemonicPBlock*);void OP_04_SUB_1094(MnemonicPBlock*);void OP_04_SUB_0134(MnemonicPBlock*);void OP_04_SUB_1158(MnemonicPBlock*);void OP_04_SUB_0454(MnemonicPBlock*);void OP_04_SUB_1478(MnemonicPBlock*);void OP_04_SUB_0710(MnemonicPBlock*);void OP_04_SUB_1734(MnemonicPBlock*);void OP_04_SUB_0774(MnemonicPBlock*);void OP_04_SUB_1798(MnemonicPBlock*);void OP_04_SUB_0838(MnemonicPBlock*);void OP_04_SUB_1862(MnemonicPBlock*);void OP_04_SUB_0902(MnemonicPBlock*);void OP_04_SUB_1926(MnemonicPBlock*);void OP_04_SUB_0518(MnemonicPBlock*);void OP_04_SUB_1542(MnemonicPBlock*);void OP_04_SUB_0582(MnemonicPBlock*);void OP_04_SUB_1606(MnemonicPBlock*);void OP_04_SUB_0646(MnemonicPBlock*);void OP_04_SUB_1670(MnemonicPBlock*);//-------------------------------------------------------------------------------//-------------------------void OP_16_SUB_0000(MnemonicPBlock*);void OP_16_SUB_0001(MnemonicPBlock*);void OP_16_SUB_0002(MnemonicPBlock*);void OP_16_SUB_0003(MnemonicPBlock*);//-------------------------void OP_18_SUB_0000(MnemonicPBlock*);void OP_18_SUB_0001(MnemonicPBlock*);void OP_18_SUB_0002(MnemonicPBlock*);void OP_18_SUB_0003(MnemonicPBlock*);//-------------------------void OP_19_SUB_0000(MnemonicPBlock*);void OP_19_SUB_0032(MnemonicPBlock*);void OP_19_SUB_0033(MnemonicPBlock*);void OP_19_SUB_0066(MnemonicPBlock*);void OP_19_SUB_0100(MnemonicPBlock*);void OP_19_SUB_0258(MnemonicPBlock*);void OP_19_SUB_0300(MnemonicPBlock*);void OP_19_SUB_0386(MnemonicPBlock*);void OP_19_SUB_0450(MnemonicPBlock*);void OP_19_SUB_0514(MnemonicPBlock*);void OP_19_SUB_0578(MnemonicPBlock*);void OP_19_SUB_0834(MnemonicPBlock*);void OP_19_SUB_0898(MnemonicPBlock*);void OP_19_SUB_1056(MnemonicPBlock*);void OP_19_SUB_1057(MnemonicPBlock*);//--------------------------void OP_20_SUB_0000(MnemonicPBlock*);void OP_20_SUB_0001(MnemonicPBlock*);//--------------------------void OP_21_SUB_0000(MnemonicPBlock*);void OP_21_SUB_0001(MnemonicPBlock*);//--------------------------void OP_23_SUB_0000(MnemonicPBlock*);void OP_23_SUB_0001(MnemonicPBlock*);//--------------------------void OP_31_SUB_0000(MnemonicPBlock*);void OP_31_SUB_0008(MnemonicPBlock*);void OP_31_SUB_0016(MnemonicPBlock*);void OP_31_SUB_0017(MnemonicPBlock*);void OP_31_SUB_1040(MnemonicPBlock*);void OP_31_SUB_1041(MnemonicPBlock*);void OP_31_SUB_0020(MnemonicPBlock*);void OP_31_SUB_0021(MnemonicPBlock*);void OP_31_SUB_1044(MnemonicPBlock*);void OP_31_SUB_1045(MnemonicPBlock*);void OP_31_SUB_0022(MnemonicPBlock*);void OP_31_SUB_0023(MnemonicPBlock*);void OP_31_SUB_0038(MnemonicPBlock*);void OP_31_SUB_0040(MnemonicPBlock*);void OP_31_SUB_0046(MnemonicPBlock*);void OP_31_SUB_0048(MnemonicPBlock*);void OP_31_SUB_0049(MnemonicPBlock*);void OP_31_SUB_0052(MnemonicPBlock*);void OP_31_SUB_0053(MnemonicPBlock*);void OP_31_SUB_0056(MnemonicPBlock*);void OP_31_SUB_0057(MnemonicPBlock*);void OP_31_SUB_0064(MnemonicPBlock*);void OP_31_SUB_0080(MnemonicPBlock*);void OP_31_SUB_0081(MnemonicPBlock*);void OP_31_SUB_1104(MnemonicPBlock*);void OP_31_SUB_1105(MnemonicPBlock*);void OP_31_SUB_0108(MnemonicPBlock*);void OP_31_SUB_0110(MnemonicPBlock*);void OP_31_SUB_0120(MnemonicPBlock*);void OP_31_SUB_0121(MnemonicPBlock*);void OP_31_SUB_0150(MnemonicPBlock*);void OP_31_SUB_0151(MnemonicPBlock*);void OP_31_SUB_0166(MnemonicPBlock*);void OP_31_SUB_0172(MnemonicPBlock*);void OP_31_SUB_0174(MnemonicPBlock*);void OP_31_SUB_0208(MnemonicPBlock*);void OP_31_SUB_0209(MnemonicPBlock*);void OP_31_SUB_1232(MnemonicPBlock*);void OP_31_SUB_1233(MnemonicPBlock*);void OP_31_SUB_0238(MnemonicPBlock*);void OP_31_SUB_0248(MnemonicPBlock*);void OP_31_SUB_0249(MnemonicPBlock*);void OP_31_SUB_0272(MnemonicPBlock*);void OP_31_SUB_0273(MnemonicPBlock*);void OP_31_SUB_1296(MnemonicPBlock*);void OP_31_SUB_1297(MnemonicPBlock*);void OP_31_SUB_0276(MnemonicPBlock*);void OP_31_SUB_0277(MnemonicPBlock*);void OP_31_SUB_1300(MnemonicPBlock*);void OP_31_SUB_1301(MnemonicPBlock*);void OP_31_SUB_0288(MnemonicPBlock*);void OP_31_SUB_0292(MnemonicPBlock*);void OP_31_SUB_0301(MnemonicPBlock*);void OP_31_SUB_0302(MnemonicPBlock*);void OP_31_SUB_0366(MnemonicPBlock*);void OP_31_SUB_0400(MnemonicPBlock*);void OP_31_SUB_0401(MnemonicPBlock*);void OP_31_SUB_1424(MnemonicPBlock*);void OP_31_SUB_1425(MnemonicPBlock*);void OP_31_SUB_0404(MnemonicPBlock*);void OP_31_SUB_0405(MnemonicPBlock*);void OP_31_SUB_1428(MnemonicPBlock*);void OP_31_SUB_1429(MnemonicPBlock*);void OP_31_SUB_0420(MnemonicPBlock*);void OP_31_SUB_0430(MnemonicPBlock*);void OP_31_SUB_0464(MnemonicPBlock*);void OP_31_SUB_0465(MnemonicPBlock*);void OP_31_SUB_1488(MnemonicPBlock*);void OP_31_SUB_1489(MnemonicPBlock*);void OP_31_SUB_0468(MnemonicPBlock*);void OP_31_SUB_0469(MnemonicPBlock*);void OP_31_SUB_1492(MnemonicPBlock*);void OP_31_SUB_1493(MnemonicPBlock*);void OP_31_SUB_0470(MnemonicPBlock*);void OP_31_SUB_0471(MnemonicPBlock*);void OP_31_SUB_1494(MnemonicPBlock*);void OP_31_SUB_1495(MnemonicPBlock*);void OP_31_SUB_0484(MnemonicPBlock*);void OP_31_SUB_0492(MnemonicPBlock*);void OP_31_SUB_0494(MnemonicPBlock*);void OP_31_SUB_0532(MnemonicPBlock*);void OP_31_SUB_0533(MnemonicPBlock*);void OP_31_SUB_1556(MnemonicPBlock*);void OP_31_SUB_1557(MnemonicPBlock*);void OP_31_SUB_0556(MnemonicPBlock*);void OP_31_SUB_0558(MnemonicPBlock*);void OP_31_SUB_0568(MnemonicPBlock*);void OP_31_SUB_0569(MnemonicPBlock*);void OP_31_SUB_0612(MnemonicPBlock*);void OP_31_SUB_0620(MnemonicPBlock*);void OP_31_SUB_0622(MnemonicPBlock*);void OP_31_SUB_0632(MnemonicPBlock*);void OP_31_SUB_0633(MnemonicPBlock*);void OP_31_SUB_0678(MnemonicPBlock*);void OP_31_SUB_0686(MnemonicPBlock*);void OP_31_SUB_0740(MnemonicPBlock*);void OP_31_SUB_0742(MnemonicPBlock*);void OP_31_SUB_0750(MnemonicPBlock*);void OP_31_SUB_0814(MnemonicPBlock*);void OP_31_SUB_0824(MnemonicPBlock*);void OP_31_SUB_0825(MnemonicPBlock*);void OP_31_SUB_0876(MnemonicPBlock*);void OP_31_SUB_0878(MnemonicPBlock*);void OP_31_SUB_0888(MnemonicPBlock*);void OP_31_SUB_0889(MnemonicPBlock*);void OP_31_SUB_0918(MnemonicPBlock*);void OP_31_SUB_0919(MnemonicPBlock*);void OP_31_SUB_1942(MnemonicPBlock*);void OP_31_SUB_1943(MnemonicPBlock*);void OP_31_SUB_0934(MnemonicPBlock*);void OP_31_SUB_0940(MnemonicPBlock*);void OP_31_SUB_0952(MnemonicPBlock*);void OP_31_SUB_0953(MnemonicPBlock*);void OP_31_SUB_0982(MnemonicPBlock*);void OP_31_SUB_0983(MnemonicPBlock*);void OP_31_SUB_2006(MnemonicPBlock*);void OP_31_SUB_2007(MnemonicPBlock*);void OP_31_SUB_1024(MnemonicPBlock*);void OP_31_SUB_1066(MnemonicPBlock*);void OP_31_SUB_1068(MnemonicPBlock*);void OP_31_SUB_1070(MnemonicPBlock*);void OP_31_SUB_1072(MnemonicPBlock*);void OP_31_SUB_1073(MnemonicPBlock*);void OP_31_SUB_1132(MnemonicPBlock*);void OP_31_SUB_1134(MnemonicPBlock*);void OP_31_SUB_1190(MnemonicPBlock*);void OP_31_SUB_1194(MnemonicPBlock*);void OP_31_SUB_1196(MnemonicPBlock*);void OP_31_SUB_1198(MnemonicPBlock*);void OP_31_SUB_1262(MnemonicPBlock*);void OP_31_SUB_1318(MnemonicPBlock*);void OP_31_SUB_1322(MnemonicPBlock*);void OP_31_SUB_1324(MnemonicPBlock*);void OP_31_SUB_1326(MnemonicPBlock*);void OP_31_SUB_1390(MnemonicPBlock*);void OP_31_SUB_1450(MnemonicPBlock*);void OP_31_SUB_1454(MnemonicPBlock*);void OP_31_SUB_1516(MnemonicPBlock*);void OP_31_SUB_1518(MnemonicPBlock*);void OP_31_SUB_1580(MnemonicPBlock*);void OP_31_SUB_1584(MnemonicPBlock*);void OP_31_SUB_1585(MnemonicPBlock*);void OP_31_SUB_1648(MnemonicPBlock*);void OP_31_SUB_1649(MnemonicPBlock*);void OP_31_SUB_1708(MnemonicPBlock*);void OP_31_SUB_1836(MnemonicPBlock*);void OP_31_SUB_1844(MnemonicPBlock*);void OP_31_SUB_1845(MnemonicPBlock*);void OP_31_SUB_1908(MnemonicPBlock*);void OP_31_SUB_1909(MnemonicPBlock*);void OP_31_SUB_1964(MnemonicPBlock*);void OP_31_SUB_1966(MnemonicPBlock*);void OP_31_SUB_2028(MnemonicPBlock*);//----------------------------------void OP_59_SUB_0036(MnemonicPBlock*);void OP_59_SUB_0037(MnemonicPBlock*);void OP_59_SUB_0040(MnemonicPBlock*);void OP_59_SUB_0041(MnemonicPBlock*);void OP_59_SUB_0042(MnemonicPBlock*);void OP_59_SUB_0043(MnemonicPBlock*);void OP_59_SUB_0044(MnemonicPBlock*);void OP_59_SUB_0045(MnemonicPBlock*);void OP_59_SUB_0048(MnemonicPBlock*);void OP_59_SUB_0049(MnemonicPBlock*);void OP_59_SUB_0050(MnemonicPBlock*);void OP_59_SUB_0051(MnemonicPBlock*);void OP_59_SUB_0056(MnemonicPBlock*);void OP_59_SUB_0057(MnemonicPBlock*);void OP_59_SUB_0058(MnemonicPBlock*);void OP_59_SUB_0059(MnemonicPBlock*);void OP_59_SUB_0060(MnemonicPBlock*);void OP_59_SUB_0061(MnemonicPBlock*);void OP_59_SUB_0062(MnemonicPBlock*);void OP_59_SUB_0063(MnemonicPBlock*);//----------------------------------void OP_63_SUB_0000(MnemonicPBlock*);void OP_63_SUB_0012(MnemonicPBlock*);void OP_63_SUB_0013(MnemonicPBlock*);void OP_63_SUB_0014(MnemonicPBlock*);void OP_63_SUB_0015(MnemonicPBlock*);void OP_63_SUB_0016(MnemonicPBlock*);void OP_63_SUB_0017(MnemonicPBlock*);void OP_63_SUB_0024(MnemonicPBlock*);void OP_63_SUB_0025(MnemonicPBlock*);void OP_63_SUB_0028(MnemonicPBlock*);void OP_63_SUB_0029(MnemonicPBlock*);void OP_63_SUB_0030(MnemonicPBlock*);void OP_63_SUB_0031(MnemonicPBlock*);void OP_63_SUB_0036(MnemonicPBlock*);void OP_63_SUB_0037(MnemonicPBlock*);void OP_63_SUB_0040(MnemonicPBlock*);void OP_63_SUB_0041(MnemonicPBlock*);void OP_63_SUB_0042(MnemonicPBlock*);void OP_63_SUB_0043(MnemonicPBlock*);void OP_63_SUB_0044(MnemonicPBlock*);void OP_63_SUB_0045(MnemonicPBlock*);void OP_63_SUB_0046(MnemonicPBlock*);void OP_63_SUB_0047(MnemonicPBlock*);void OP_63_SUB_0050(MnemonicPBlock*);void OP_63_SUB_0051(MnemonicPBlock*);void OP_63_SUB_0052(MnemonicPBlock*);void OP_63_SUB_0053(MnemonicPBlock*);void OP_63_SUB_0056(MnemonicPBlock*);void OP_63_SUB_0057(MnemonicPBlock*);void OP_63_SUB_0058(MnemonicPBlock*);void OP_63_SUB_0059(MnemonicPBlock*);void OP_63_SUB_0060(MnemonicPBlock*);void OP_63_SUB_0061(MnemonicPBlock*);void OP_63_SUB_0062(MnemonicPBlock*);void OP_63_SUB_0063(MnemonicPBlock*);//----------------------------------void OP_63_SUB_0000_SUB_0(MnemonicPBlock*);void OP_63_SUB_0000_SUB_1(MnemonicPBlock*);void OP_63_SUB_0000_SUB_2(MnemonicPBlock*);//----------------------------------void OP_63_SUB_0012_SUB_1(MnemonicPBlock*);void OP_63_SUB_0012_SUB_2(MnemonicPBlock*);void OP_63_SUB_0012_SUB_4(MnemonicPBlock*);//----------------------------------void OP_63_SUB_0013_SUB_1(MnemonicPBlock*);void OP_63_SUB_0013_SUB_2(MnemonicPBlock*);void OP_63_SUB_0013_SUB_4(MnemonicPBlock*);//----------------------------------void OP_63_SUB_0014_SUB_18(MnemonicPBlock*);void OP_63_SUB_0014_SUB_22(MnemonicPBlock*);//----------------------------------void OP_63_SUB_0015_SUB_18(MnemonicPBlock*);void OP_63_SUB_0015_SUB_22(MnemonicPBlock*);//----------------------------------void OP_63_SUB_0016_SUB_1(MnemonicPBlock*);void OP_63_SUB_0016_SUB_2(MnemonicPBlock*);void OP_63_SUB_0016_SUB_4(MnemonicPBlock*);void OP_63_SUB_0016_SUB_8(MnemonicPBlock*);//----------------------------------void OP_63_SUB_0017_SUB_1(MnemonicPBlock*);void OP_63_SUB_0017_SUB_2(MnemonicPBlock*);void OP_63_SUB_0017_SUB_4(MnemonicPBlock*);void OP_63_SUB_0017_SUB_8(MnemonicPBlock*);//----------------------------------void add(AssemblyPBlock*);void addP(AssemblyPBlock*);void addo(AssemblyPBlock*);void addoP(AssemblyPBlock*);void addc(AssemblyPBlock*);void addcP(AssemblyPBlock*);void addco(AssemblyPBlock*);void addcoP(AssemblyPBlock*);void adde(AssemblyPBlock*);void addeP(AssemblyPBlock*);void addeo(AssemblyPBlock*);void addeoP(AssemblyPBlock*);void addi(AssemblyPBlock*);void addic(AssemblyPBlock*);void addicP(AssemblyPBlock*);void addis(AssemblyPBlock*);void addme(AssemblyPBlock*);void addmeP(AssemblyPBlock*);void addmeo(AssemblyPBlock*);void addmeoP(AssemblyPBlock*);void addze(AssemblyPBlock*);void addzeP(AssemblyPBlock*);void addzeo(AssemblyPBlock*);void addzeoP(AssemblyPBlock*);void _and(AssemblyPBlock*);void andP(AssemblyPBlock*);void andc(AssemblyPBlock*);void andcP(AssemblyPBlock*);void andiP(AssemblyPBlock*);void andisP(AssemblyPBlock*);void bcctr(AssemblyPBlock*);void bcctrl(AssemblyPBlock*);void bclr(AssemblyPBlock*);void bclrl(AssemblyPBlock*);void cmp(AssemblyPBlock*);void cmpi(AssemblyPBlock*);void cmpl(AssemblyPBlock*);void cmpli(AssemblyPBlock*);void cntlzw(AssemblyPBlock*);void cntlzwP(AssemblyPBlock*);void crand(AssemblyPBlock*);void crandc(AssemblyPBlock*);void creqv(AssemblyPBlock*);void crnand(AssemblyPBlock*);void crnor(AssemblyPBlock*);void cror(AssemblyPBlock*);void crorc(AssemblyPBlock*);void crxor(AssemblyPBlock*);void dcba(AssemblyPBlock*);void dcbf(AssemblyPBlock*);void dcbi(AssemblyPBlock*);void dcbst(AssemblyPBlock*);void dcbt(AssemblyPBlock*);void dcbtst(AssemblyPBlock*);void dcbz(AssemblyPBlock*);void divw(AssemblyPBlock*);void divwP(AssemblyPBlock*);void divwo(AssemblyPBlock*);void divwoP(AssemblyPBlock*);void divwu(AssemblyPBlock*);void divwuP(AssemblyPBlock*);void divwuo(AssemblyPBlock*);void divwuoP(AssemblyPBlock*);void eciwx(AssemblyPBlock*);void ecowx(AssemblyPBlock*);void eieio(AssemblyPBlock*);void eqv(AssemblyPBlock*);void eqvP(AssemblyPBlock*);void extsb(AssemblyPBlock*);void extsbP(AssemblyPBlock*);void extsh(AssemblyPBlock*);void extshP(AssemblyPBlock*);void fabs(AssemblyPBlock*);void fabsP(AssemblyPBlock*);void fadd(AssemblyPBlock*);void faddP(AssemblyPBlock*);void faddsP(AssemblyPBlock*);void fadds(AssemblyPBlock*);void fcmpo(AssemblyPBlock*);void fcmpu(AssemblyPBlock*);void fctiw(AssemblyPBlock*);void fctiwP(AssemblyPBlock*);void fctiwz(AssemblyPBlock*);void fctiwzP(AssemblyPBlock*);void fdiv(AssemblyPBlock*);void fdivP(AssemblyPBlock*);void fdivs(AssemblyPBlock*);void fdivsP(AssemblyPBlock*);void fmadd(AssemblyPBlock*);void fmaddP(AssemblyPBlock*);void fmadds(AssemblyPBlock*);void fmaddsP(AssemblyPBlock*);void fmr(AssemblyPBlock*);void fmrP(AssemblyPBlock*);void fmsub(AssemblyPBlock*);void fmsubP(AssemblyPBlock*);void fmsubs(AssemblyPBlock*);void fmsubsP(AssemblyPBlock*);void fmul(AssemblyPBlock*);void fmulP(AssemblyPBlock*);void fmuls(AssemblyPBlock*);void fmulsP(AssemblyPBlock*);void fnabs(AssemblyPBlock*);void fnabsP(AssemblyPBlock*);void fneg(AssemblyPBlock*);void fnegP(AssemblyPBlock*);void fnmadd(AssemblyPBlock*);void fnmaddP(AssemblyPBlock*);void fnmadds(AssemblyPBlock*);void fnmaddsP(AssemblyPBlock*);void fnmsub(AssemblyPBlock*);void fnmsubP(AssemblyPBlock*);void fnmsubs(AssemblyPBlock*);void fnmsubsP(AssemblyPBlock*);void fres(AssemblyPBlock*);void fresP(AssemblyPBlock*);void frsp(AssemblyPBlock*);void frspP(AssemblyPBlock*);void frsqrte(AssemblyPBlock*);void frsqrteP(AssemblyPBlock*);void fsel(AssemblyPBlock*);void fselP(AssemblyPBlock*);void fsqrt(AssemblyPBlock*);void fsqrtP(AssemblyPBlock*);void fsqrts(AssemblyPBlock*);void fsqrtsP(AssemblyPBlock*);void fsub(AssemblyPBlock*);void fsubP(AssemblyPBlock*);void fsubs(AssemblyPBlock*);void fsubsP(AssemblyPBlock*);void icbi(AssemblyPBlock*);void isync(AssemblyPBlock*);void lbz(AssemblyPBlock*);void lbzu(AssemblyPBlock*);void lbzux(AssemblyPBlock*);void lbzx(AssemblyPBlock*);void lfd(AssemblyPBlock*);void lfdu(AssemblyPBlock*);void lfdux(AssemblyPBlock*);void lfdx(AssemblyPBlock*);void lfs(AssemblyPBlock*);void lfsu(AssemblyPBlock*);void lfsux(AssemblyPBlock*);void lfsx(AssemblyPBlock*);void lha(AssemblyPBlock*);void lhau(AssemblyPBlock*);void lhaux(AssemblyPBlock*);void lhax(AssemblyPBlock*);void lhbrx(AssemblyPBlock*);void lhz(AssemblyPBlock*);void lhzu(AssemblyPBlock*);void lhzux(AssemblyPBlock*);void lhzx(AssemblyPBlock*);void lmw(AssemblyPBlock*);void lswi(AssemblyPBlock*);void lswx(AssemblyPBlock*);void lwarx(AssemblyPBlock*);void lwbrx(AssemblyPBlock*);void lwz(AssemblyPBlock*);void lwzu(AssemblyPBlock*);void lwzux(AssemblyPBlock*);void lwzx(AssemblyPBlock*);void mcrf(AssemblyPBlock*);void mcrfs(AssemblyPBlock*);void mcrxr(AssemblyPBlock*);void mfcr(AssemblyPBlock*);void mffs(AssemblyPBlock*);void mffsP(AssemblyPBlock*);void mfmsr(AssemblyPBlock*);void mfspr(AssemblyPBlock*);void mfsr(AssemblyPBlock*);void mfsrin(AssemblyPBlock*);void mftb(AssemblyPBlock*);void mtcrf(AssemblyPBlock*);void mtfsb0(AssemblyPBlock*);void mtfsb0P(AssemblyPBlock*);void mtfsb1(AssemblyPBlock*);void mtfsb1P(AssemblyPBlock*);void mtfsf(AssemblyPBlock*);void mtfsfP(AssemblyPBlock*);void mtfsfi(AssemblyPBlock*);void mtfsfiP(AssemblyPBlock*);void mtmsr(AssemblyPBlock*);void mtspr(AssemblyPBlock*);void mtsr(AssemblyPBlock*);void mtsrin(AssemblyPBlock*);void mulhw(AssemblyPBlock*);void mulhwP(AssemblyPBlock*);void mulhwu(AssemblyPBlock*);void mulhwuP(AssemblyPBlock*);void mulli(AssemblyPBlock*);void mullw(AssemblyPBlock*);void mullwP(AssemblyPBlock*);void mullwo(AssemblyPBlock*);void mullwoP(AssemblyPBlock*);void nand(AssemblyPBlock*);void nandP(AssemblyPBlock*);void neg(AssemblyPBlock*);void negP(AssemblyPBlock*);void nego(AssemblyPBlock*);void negoP(AssemblyPBlock*);void nor(AssemblyPBlock*);void norP(AssemblyPBlock*);void _or(AssemblyPBlock*);void orP(AssemblyPBlock*);void orc(AssemblyPBlock*);void orcP(AssemblyPBlock*);void ori(AssemblyPBlock*);void oris(AssemblyPBlock*);void rfi(AssemblyPBlock*);void rlwimi(AssemblyPBlock*);void rlwimiP(AssemblyPBlock*);void rlwinm(AssemblyPBlock*);void rlwinmP(AssemblyPBlock*);void rlwnm(AssemblyPBlock*);void rlwnmP(AssemblyPBlock*);void sc(AssemblyPBlock*);void slw(AssemblyPBlock*);void slwP(AssemblyPBlock*);void sraw(AssemblyPBlock*);void srawP(AssemblyPBlock*);void srawi(AssemblyPBlock*);void srawiP(AssemblyPBlock*);void srw(AssemblyPBlock*);void srwP(AssemblyPBlock*);void stb(AssemblyPBlock*);void stbu(AssemblyPBlock*);void stbux(AssemblyPBlock*);void stbx(AssemblyPBlock*);void stfd(AssemblyPBlock*);void stfdu(AssemblyPBlock*);void stfdux(AssemblyPBlock*);void stfdx(AssemblyPBlock*);void stfiwx(AssemblyPBlock*);void stfs(AssemblyPBlock*);void stfsu(AssemblyPBlock*);void stfsux(AssemblyPBlock*);void stfsx(AssemblyPBlock*);void sth(AssemblyPBlock*);void sthbrx(AssemblyPBlock*);void sthu(AssemblyPBlock*);void sthux(AssemblyPBlock*);void sthx(AssemblyPBlock*);void stmw(AssemblyPBlock*);void stswi(AssemblyPBlock*);void stswx(AssemblyPBlock*);void stw(AssemblyPBlock*);void stwbrx(AssemblyPBlock*);void stwcxP(AssemblyPBlock*);void stwu(AssemblyPBlock*);void stwux(AssemblyPBlock*);void stwx(AssemblyPBlock*);void subf(AssemblyPBlock*);void subfP(AssemblyPBlock*);void subfo(AssemblyPBlock*);void subfoP(AssemblyPBlock*);void subfc(AssemblyPBlock*);void subfcP(AssemblyPBlock*);void subfco(AssemblyPBlock*);void subfcoP(AssemblyPBlock*);void subfe(AssemblyPBlock*);void subfeP(AssemblyPBlock*);void subfeo(AssemblyPBlock*);void subfeoP(AssemblyPBlock*);void subfic(AssemblyPBlock*);void subfme(AssemblyPBlock*);void subfmeP(AssemblyPBlock*);void subfmeo(AssemblyPBlock*);void subfmeoP(AssemblyPBlock*);void subfze(AssemblyPBlock*);void subfzeP(AssemblyPBlock*);void subfzeo(AssemblyPBlock*);void subfzeoP(AssemblyPBlock*);void sync(AssemblyPBlock*);void tlbia(AssemblyPBlock*);void tlbie(AssemblyPBlock*);void tlbsync(AssemblyPBlock*);void tw(AssemblyPBlock*);void twi(AssemblyPBlock*);void _xor(AssemblyPBlock*);void xorP(AssemblyPBlock*);void xori(AssemblyPBlock*);void xoris(AssemblyPBlock*);void b(AssemblyPBlock*);void ba(AssemblyPBlock*);void bl(AssemblyPBlock*);void bla(AssemblyPBlock*);void bc(AssemblyPBlock*);void bca(AssemblyPBlock*);void bcl(AssemblyPBlock*);void bcla(AssemblyPBlock*);void bdnz(AssemblyPBlock*);void bdnza(AssemblyPBlock*);void bdnzl(AssemblyPBlock*);void bdnzla(AssemblyPBlock*);void blt(AssemblyPBlock*);void blta(AssemblyPBlock*);void bltl(AssemblyPBlock*);void bltla(AssemblyPBlock*);void ble(AssemblyPBlock*);void blea(AssemblyPBlock*);void blel(AssemblyPBlock*);void blela(AssemblyPBlock*);void beq(AssemblyPBlock*);void beqa(AssemblyPBlock*);void beql(AssemblyPBlock*);void beqla(AssemblyPBlock*);void bge(AssemblyPBlock*);void bgea(AssemblyPBlock*);void bgel(AssemblyPBlock*);void bgela(AssemblyPBlock*);void bgt(AssemblyPBlock*);void bgta(AssemblyPBlock*);void bgtl(AssemblyPBlock*);void bgtla(AssemblyPBlock*);void bne(AssemblyPBlock*);void bnea(AssemblyPBlock*);void bnel(AssemblyPBlock*);void bnela(AssemblyPBlock*);void nop(AssemblyPBlock*);void blr(AssemblyPBlock*);void dc(AssemblyPBlock*);void mflr(AssemblyPBlock*);void mtlr(AssemblyPBlock*);void la(AssemblyPBlock*);void li(AssemblyPBlock*);void mr(AssemblyPBlock*);void mtctr(AssemblyPBlock*);void bctr(AssemblyPBlock*);void mfctr(AssemblyPBlock*);void bctrl(AssemblyPBlock*);void blrl(AssemblyPBlock*);//----------ALTIVEC!----------void vmhaddshs(AssemblyPBlock*);void vmhraddshs(AssemblyPBlock*);void vmladduhm(AssemblyPBlock*);void vmsumubm(AssemblyPBlock*);void vmsummbm(AssemblyPBlock*);void vmsumuhm(AssemblyPBlock*);void vmsumuhs(AssemblyPBlock*);void vmsumshm(AssemblyPBlock*);void vmsumshs(AssemblyPBlock*);void vsel(AssemblyPBlock*);void vperm(AssemblyPBlock*);void vsldoi(AssemblyPBlock*);void vmaddfp(AssemblyPBlock*);void vnmsubfp(AssemblyPBlock*);void vaddubm(AssemblyPBlock*);void vadduhm(AssemblyPBlock*);void vadduwm(AssemblyPBlock*);void vaddubs(AssemblyPBlock*);void vadduhs(AssemblyPBlock*);void vadduws(AssemblyPBlock*);void vaddsbs(AssemblyPBlock*);void vaddshs(AssemblyPBlock*);void vaddsws(AssemblyPBlock*);void vsububm(AssemblyPBlock*);void vsubuhm(AssemblyPBlock*);void vsubuwm(AssemblyPBlock*);void vsubcuw(AssemblyPBlock*);void vsububs(AssemblyPBlock*);void vsubuhs(AssemblyPBlock*);void vsubuws(AssemblyPBlock*);void vsubsbs(AssemblyPBlock*);void vsubshs(AssemblyPBlock*);void vsubsws(AssemblyPBlock*);void vmaxub(AssemblyPBlock*);void vmaxuh(AssemblyPBlock*);void vmaxuw(AssemblyPBlock*);void vmaxsb(AssemblyPBlock*);void vmaxsh(AssemblyPBlock*);void vmaxsw(AssemblyPBlock*);void vminub(AssemblyPBlock*);void vminuh(AssemblyPBlock*);void vminuw(AssemblyPBlock*);void vminsb(AssemblyPBlock*);void vminsh(AssemblyPBlock*);void vminsw(AssemblyPBlock*);void vavgub(AssemblyPBlock*);void vavguh(AssemblyPBlock*);void vavguw(AssemblyPBlock*);void vavgsb(AssemblyPBlock*);void vavgsh(AssemblyPBlock*);void vavgsw(AssemblyPBlock*);void vrlb(AssemblyPBlock*);void vrlh(AssemblyPBlock*);void vrlw(AssemblyPBlock*);void vslb(AssemblyPBlock*);void vslh(AssemblyPBlock*);void vslw(AssemblyPBlock*);void vsl(AssemblyPBlock*);void vsrb(AssemblyPBlock*);void vsrh(AssemblyPBlock*);void vsrw(AssemblyPBlock*);void vsr(AssemblyPBlock*);void vsrab(AssemblyPBlock*);void vsrah(AssemblyPBlock*);void vsraw(AssemblyPBlock*);void vand(AssemblyPBlock*);void vandc(AssemblyPBlock*);void vor(AssemblyPBlock*);void vnor(AssemblyPBlock*);void mfvscr(AssemblyPBlock*);void mtvscr(AssemblyPBlock*);void vmuloub(AssemblyPBlock*);void vmulouh(AssemblyPBlock*);void vmulosb(AssemblyPBlock*);void vmulosh(AssemblyPBlock*);void vmuleub(AssemblyPBlock*);void vmuleuh(AssemblyPBlock*);void vmulesb(AssemblyPBlock*);void vmulesh(AssemblyPBlock*);void vsum4ubs(AssemblyPBlock*);void vsum4sbs(AssemblyPBlock*);void vsum4shs(AssemblyPBlock*);void vsum2sws(AssemblyPBlock*);void vsumsws(AssemblyPBlock*);void vaddfp(AssemblyPBlock*);void vsubfp(AssemblyPBlock*);void vrefp(AssemblyPBlock*);void vrsqrtefp(AssemblyPBlock*);void vexptefp(AssemblyPBlock*);void vlogefp(AssemblyPBlock*);void vrfin(AssemblyPBlock*);void vrfiz(AssemblyPBlock*);void vrfip(AssemblyPBlock*);void vrfim(AssemblyPBlock*);void vcfux(AssemblyPBlock*);void vcfsx(AssemblyPBlock*);void vctuxs(AssemblyPBlock*);void vctsxs(AssemblyPBlock*);void vmaxfp(AssemblyPBlock*);void vminfp(AssemblyPBlock*);void vmrghb(AssemblyPBlock*);void vmrghh(AssemblyPBlock*);void vmrghw(AssemblyPBlock*);void vmrglb(AssemblyPBlock*);void vmrglh(AssemblyPBlock*);void vmrglw(AssemblyPBlock*);void vspltb(AssemblyPBlock*);void vsplth(AssemblyPBlock*);void vspltw(AssemblyPBlock*);void vspltisb(AssemblyPBlock*);void vspltish(AssemblyPBlock*);void vspltisw(AssemblyPBlock*);void vslo(AssemblyPBlock*);void vsro(AssemblyPBlock*);void vpkuhum(AssemblyPBlock*);void vpkuwum(AssemblyPBlock*);void vpkuhus(AssemblyPBlock*);void vpkuwus(AssemblyPBlock*);void vpkshus(AssemblyPBlock*);void vpkswus(AssemblyPBlock*);void vpkshss(AssemblyPBlock*);void vpkswss(AssemblyPBlock*);void vupkhsb(AssemblyPBlock*);void vupkhsh(AssemblyPBlock*);void vupklsb(AssemblyPBlock*);void vupklsh(AssemblyPBlock*);void vpkpx(AssemblyPBlock*);void vupkhpx(AssemblyPBlock*);void vupklpx(AssemblyPBlock*);void vxor(AssemblyPBlock*);void dst(AssemblyPBlock*);void dstt(AssemblyPBlock*);void dstst(AssemblyPBlock*);void dststt(AssemblyPBlock*);void dss(AssemblyPBlock*);void dssall(AssemblyPBlock*);void lvebx(AssemblyPBlock*);void lvehx(AssemblyPBlock*);void lvewx(AssemblyPBlock*);void lvsl(AssemblyPBlock*);void lvsr(AssemblyPBlock*);void lvx(AssemblyPBlock*);void lvxl(AssemblyPBlock*);void stvebx(AssemblyPBlock*);void stvehx(AssemblyPBlock*);void stvewx(AssemblyPBlock*);void stvx(AssemblyPBlock*);void stvxl(AssemblyPBlock*);void vcmpbfp(AssemblyPBlock*);void vcmpbfpP(AssemblyPBlock*);void vcmpeqfp(AssemblyPBlock*);void vcmpeqfpP(AssemblyPBlock*);void vcmpequb(AssemblyPBlock*);void vcmpequbP(AssemblyPBlock*);void vcmpequh(AssemblyPBlock*);void vcmpequhP(AssemblyPBlock*);void vcmpequw(AssemblyPBlock*);void vcmpequwP(AssemblyPBlock*);void vcmpgefp(AssemblyPBlock*);void vcmpgefpP(AssemblyPBlock*);void vcmpgtfp(AssemblyPBlock*);void vcmpgtfpP(AssemblyPBlock*);void vcmpgtsb(AssemblyPBlock*);void vcmpgtsbP(AssemblyPBlock*);void vcmpgtsh(AssemblyPBlock*);void vcmpgtshP(AssemblyPBlock*);void vcmpgtsw(AssemblyPBlock*);void vcmpgtswP(AssemblyPBlock*);void vcmpgtub(AssemblyPBlock*);void vcmpgtubP(AssemblyPBlock*);void vcmpgtuh(AssemblyPBlock*);void vcmpgtuhP(AssemblyPBlock*);void vcmpgtuw(AssemblyPBlock*);void vcmpgtuwP(AssemblyPBlock*);//----------ALTIVEC!----------void	MnemonicWriter386(MnemonicWriterPBlock	*mwPB);void Initialize(void);void Finalize(void);void CheckPrefs(void);void FileToFileCopy(void* src, void* dest);void VerifyKeySettings(Key*);unsigned short myShortRangedRandom(unsigned short,unsigned short);void AssembleInstructions(AssemblerRecord*);void AssembleInstructions386(AssemblerRecord*);void MakeApp(AssemblerRecord*);void MakeMachApp(AssemblerRecord*);void MakePEApp(AssemblerRecord*);void Explore2(void);Boolean MyPStrCmp(Str255,Str255);void DirectDataIncluder(AssemblyPBlock* asmPB);DataVariable* GatherDataVariables(char*,long,long**,long*);void AssembleRelocations(AssemblerRecord*);LabelList* FindMacroRefs(char*,long);AsmMacro* GatherMacroDefs(char*,long);UInt32 PEFComputeHashWord(BytePtr,UInt32);UInt8 PEFComputeHashTableExponent(SInt32);void Byte_MACRO(AssemblyPBlock*);void MacroDefiner(AssemblyPBlock*);void Swap_IMAGE_NT_HEADERS(IMAGE_NT_HEADERS*);void Swap_IMAGE_DOS_HEADER(IMAGE_DOS_HEADER*);void Swap_IMAGE_SECTION_HEADER(IMAGE_SECTION_HEADER*);void Swap_IMAGE_DATA_DIRECTORY(IMAGE_DATA_DIRECTORY*);FileReference MyPutFolder(Str255,Str255);FileReference MyPutFile(Str255,Str255);void CopyResources(FileReference,FileReference);void PreProcessSource(PreProcessSourcePBlock	*ppsPB);void PreProcessSource386(PreProcessSourcePBlock	*ppsPB);