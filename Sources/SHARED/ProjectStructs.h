Copyright 2016 Gregory BryantLicensed under the Apache License, Version 2.0 (the "License");you may not use this file except in compliance with the License.You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an "AS IS" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License./***********************************************************************/struct DataViewColumn{long					type;Str255					title;long					width;long					left;long					right;struct DataViewColumn	*next;};typedef struct DataViewColumn DataViewColumn;struct DataView{long			scrollPosition;char			fontSize;Str255			font;long			horizontalMargin;long			verticalMargin;long			columnCount;long			rowCount;DataViewColumn	*columns;long			*rowData;Rect			bounds;};typedef struct DataView DataView;struct FocusChain{struct FocusChain			*prev;ControlRef					control;struct FocusChain			*next;};typedef struct FocusChain FocusChain;struct AppControlList{ControlRef			progressBar;ControlRef			statusText;ControlRef			cancelText;ControlRef			tabs;ControlRef			pane1;ControlRef			pane2;ControlRef			pane3;ControlRef			p1Target;ControlRef			p1GoButton;ControlRef			p1New;ControlRef			p1Open;ControlRef			p1Save;ControlRef			p1SaveAs;ControlRef			p1cfrg;ControlRef			p1mach;ControlRef			p1ntel;ControlRef			machNewSource;ControlRef			machEditSource;ControlRef			machSelectSource;ControlRef			machSourceName;ControlRef			machNewMachInfo;ControlRef			machEditMachInfo;ControlRef			machSelectMachInfo;ControlRef			machMachInfoName;ControlRef			machProduct;ControlRef			siinAss;ControlRef			siinAssResult;ControlRef			siinDiss;ControlRef			siinDissResult;ControlRef			siinErrorMessage;ControlRef			cfrgNewSource;ControlRef			cfrgEditSource;ControlRef			cfrgSelectSource;ControlRef			cfrgSourceName;ControlRef			cfrgNewData;ControlRef			cfrgEditData;ControlRef			cfrgSelectData;ControlRef			cfrgDataName;ControlRef			cfrgDataExports;ControlRef			cfrgDataExportCount;ControlRef			cfrgNewRelocation;ControlRef			cfrgEditRelocation;ControlRef			cfrgSelectRelocation;ControlRef			cfrgRelocationName;ControlRef			cfrgNewResource;ControlRef			cfrgEditResource;ControlRef			cfrgSelectResource;ControlRef			cfrgResourceName;ControlRef			cfrgmain;ControlRef			cfrginit;ControlRef			cfrgterm;ControlRef			cfrgProduct;ControlRef			cfrgType;ControlRef			cfrgCreator;ControlRef			cfrgComments;ControlRef			p2TargetIcon;ControlRef			p2TargetName;ControlRef			p2GoButton;ControlRef			p3TargetIcon;ControlRef			p3TargetName;ControlRef			p3GoButton;ControlRef			rlocBrowser;ControlRef			rlocAdd;ControlRef			rlocDelete;ControlRef			rlocMessageLabel;ControlRef			rlocMessageText;};typedef struct AppControlList AppControlList;struct HashRecord{Boolean			assigned;long			marker;long			count;};typedef struct HashRecord HashRecord;struct PointerRecord{struct PointerRecord		*prev;void						*ptr;long						line;Str255						name;struct PointerRecord		*next;};typedef PointerRecord PointerRecord;struct CustomColumnRLOC{char			count;unsigned long	*value;long			*type;Point			*dimension;long			selector;};typedef struct CustomColumnRLOC CustomColumnRLOC;struct LongChain{struct LongChain	*prev;unsigned long		v;long				opcode;unsigned char		mnem[9];CustomColumnRLOC	*args;struct LongChain	*next;};typedef struct LongChain LongChain;struct LabelList{struct LabelList	*prev;char				*label;unsigned long		index;struct LabelList	*next;};typedef struct LabelList LabelList;struct RelocMachine{unsigned long	relocAddress;unsigned long	importIndex;unsigned long	sectionC;unsigned long	sectionD;LabelList		*sym;};typedef struct RelocMachine RelocMachine;struct MnemonicWriterPBlock{unsigned long	codeLength;long 			*codeSection;unsigned char	*codeSection2;long 			*totalWritten;void* 			outFRef;ControlRef		progBar;LabelList		*labelList;RelocMachine	*rm;};typedef struct MnemonicWriterPBlock MnemonicWriterPBlock;struct GlobalSettings{Boolean		labels;Boolean		procs;Boolean		bfspeed;};typedef struct GlobalSettings GlobalSettings;struct MnemonicPBlock{long				*tw;	//totalWrittenlong				c;		//countvoid*				fr;		//fileReflong				i;		//instructionlong				s;		//selector (i count)unsigned long		cl;		//code lengthlong				a;		//scratchlong				b;		//scratchlong				bv;		//boollong 				*cs;	//codeSectionRelocMachine		*rm;};typedef struct MnemonicPBlock MnemonicPBlock;struct AsmMacro{char				*name;long				*data;long				count;struct AsmMacro		*next;};typedef struct AsmMacro AsmMacro;struct DataVariable{char					*name;long					off;struct DataVariable		*next;};typedef struct DataVariable DataVariable;struct FragPoint{unsigned long		main;unsigned long		init;unsigned long		term;Boolean				m;Boolean				i;Boolean				t;};typedef struct FragPoint FragPoint;struct ImportRecord{struct ImportRecord		*prev;Boolean					weak;Boolean					init;char					*lib;long					symcount;char					*sym;struct ImportRecord		*next;};typedef struct ImportRecord ImportRecord;struct ExportRecord{struct ExportRecord		*prev;unsigned long			offset;char					*label;struct ExportRecord		*next;};typedef struct ExportRecord ExportRecord;struct LabelEntry{unsigned long			location;char					*name;struct LabelEntry		*next;};typedef struct LabelEntry LabelEntry;struct FoundBranches{unsigned long					origin;unsigned long					destination;struct FoundBranches			*next;};typedef struct FoundBranches;struct BranchEntry{unsigned long			location;long					mask;char					*name;struct BranchEntry		*next;};typedef struct BranchEntry BranchEntry;struct DataExport{char				*label;unsigned long		offset;struct DataExport 	*next;};typedef struct DataExport DataExport;typedef DataExport CodeExport;struct KeyFilePB{FileReference	dissFolder;Str255 			*appName;long		 	fileType;long		 	fileCreator;DataExport		*dataExports;unsigned long	mainOffset;unsigned long	initOffset;unsigned long	termOffset;Boolean			mach;Boolean			cfrg;Boolean			intel;Boolean			rsrc;Boolean			rsrcmb;};typedef struct KeyFilePB KeyFilePB;struct Key{Boolean				dirty;FileReference		keyFileRef;FileReference		asm_;FileReference		rsrc;FileReference		rsrcmb;FileReference		data;FileReference		secoff;FileReference		reloc;FileReference		machinfo;FileReference	 bintarget;Str255		target;long		type;long		creator;Boolean		asmb;Boolean		rsrcb;Boolean		rsrcmbb;Boolean		datab;Boolean		secoffb;Boolean		secoffob;Boolean		relocb;Boolean		machb;Boolean		cfrgb;Boolean		intelb;struct DataExport	de;Boolean				deb;unsigned long	mainOffset;unsigned long	initOffset;unsigned long	termOffset;};typedef struct Key Key;struct AssemblerRecord{Key					*key;ImportRecord		import;ExportRecord		exports;long				instcount;long				instaccum;long				*insts;short				*relocs;long				reloccount;/*----section markers----*/long				main;long				init;long				term;/*----section markers----*/FileReference			parSpec;FileReference			dataSection;FileReference			codeSection;};typedef struct AssemblerRecord AssemblerRecord;struct IncludeSaveRecord{FileReference			file;long					pos;long					lineNum;};typedef struct IncludeSaveRecord IncludeSaveRecord;struct AssemblyPBlock{char				*asmBuffer;long				*bMarker;long				*asmBSize;char				lineAsmBuffer[2056];long				lineAsmBMark;void				*fRefNumber; //for current srcFileReference				currSrc;FileReference				codeOutFSS;IncludeSaveRecord	*isRecord;long				lineNum;void				*codeOutRef;long				codeOutSize;unsigned long		cCount;unsigned long		sCount;long				depth;short				*relocs;long				rMarker;char				*mnemonic;AssemblerRecord		*asmRecord;ImportRecord		*currImpRec;ExportRecord		*currExpRec;LabelEntry			*labels;BranchEntry			*branches;BranchEntry			**currBranch;AsmMacro			*macro;DataVariable		*dataV;char				*name;DataVariable		*curr;};typedef struct AssemblyPBlock AssemblyPBlock;struct BranchFinderPBlock{long			codeLength;long			*codeSection;long			selector;struct FoundBranches	*firstFB;struct FoundBranches	**currFB;};typedef struct BranchFinderPBlock BranchFinderPBlock;#pragma options align = packedstruct MacBinaryIIIHeader{char		oldVersionNumber;char		fileNameLength;char		fileName[63];long		fileType;long		fileCreator;char		originalFinderFlags;char		reserved1;short		windowPosV;short		windowPosH;short		folderID;char		protectedFlag;char		reserved2;long		dataForkLength;long		resourceForkLength;long		creationDate;long		modifiedDate;short		getInfoLength;char		moreFinderFlags;long		signature;char		script;char		extendedFinderFlags;char		reserved3[8];long		totalFilesLength;short		secondaryHeaderLength;char		macBinaryVersion;char		minimumVersion;short		crc;char		alignment[2];};typedef struct MacBinaryIIIHeader	MacBinaryIIIHeader;#pragma options align = resetstruct PEFContainer{PEFContainerHeader				containerHeader;PEFSectionHeader				*sectionHeader;char							*sectionNameTable;PEFLoaderInfoHeader				loaderInfoHeader;PEFImportedLibrary				*importedLibrary;PEFImportedSymbol				*importedSymbol;PEFLoaderRelocationHeader		*loaderRelocationHeader;char							*relocationInstructions;char							*loaderStringTable;PEFExportedSymbolHashSlot		*exportHashSlot;PEFExportedSymbolKey			*exportSymbolKey;PEFExportedSymbol				*exportedSymbol;long							*codeSection;char							*dataSection;	};typedef struct PEFContainer	PEFContainer;struct LabelListPBlock{long					codeLength;long 					*codeSection;FragPoint				fragPoint;CodeExport				*codeExport;long					libcount;PEFImportedLibrary		*lib;PEFImportedSymbol		*sym;char*					name;RelocMachine			*rm;};typedef struct LabelListPBlock LabelListPBlock;struct IncludeList{Str255				name;unsigned long		index;struct IncludeList	*next;};typedef struct IncludeList IncludeList;struct PreProcessSourcePBlock{Key						*key;IncludeList 			*includedFiles,**currincludedFiles;AsmMacro				*asmMacros;AsmMacro				**currAsmMacros;;DataVariable			*dataV;FileReference			mainsource;FileReference			dataSection;long					totalDataSize;long					includeCount;DataVariable			**currDataV;DataVariable			**currDataOff;};typedef struct PreProcessSourcePBlock PreProcessSourcePBlock;struct RelocOpWriterPBlock{void* 			outFRef;long			*totalWritten;unsigned short*	relocInst;long			relocSize;long			pos;unsigned long	count;char			section;RelocMachine	rMachine;LabelListPBlock *llpb;};typedef struct RelocOpWriterPBlock RelocOpWriterPBlock;typedef unsigned long	Elf32_Addr;typedef short			Elf32_Half;typedef unsigned long	Elf32_Off;typedef signed long		Elf32_Sword;typedef unsigned long	Elf32_Word;#define EI_NIDENT 16struct Elf32_Ehdr{unsigned char		e_ident[EI_NIDENT];Elf32_Half			e_type;Elf32_Half			e_machine;Elf32_Word			e_version;Elf32_Addr			e_entry;Elf32_Off			e_phoff;Elf32_Off			e_shoff;Elf32_Word			e_flags;Elf32_Half			e_ehsize;Elf32_Half			e_phentsize;Elf32_Half			e_phnum;Elf32_Half			e_shentsize;Elf32_Half			e_shnum;Elf32_Half			e_shstrndx;};typedef struct Elf32_Ehdr Elf32_Ehdr;struct Elf32_Phdr{Elf32_Word			p_type;Elf32_Off			p_offset;Elf32_Addr			p_vaddr;Elf32_Addr			p_paddr;Elf32_Word			p_filesz;Elf32_Word			p_memsz;Elf32_Word			p_flags;Elf32_Word			p_align;};typedef struct Elf32_Phdr Elf32_Phdr;